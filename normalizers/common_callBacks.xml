<?xml version="1.0" encoding="UTF-8"?>
<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
<!--                                                            -->
<!-- pylogparser - Logs parsers python library                  -->
<!-- Copyright (C) 2011 Wallix Inc.                             -->
<!--                                                            -->
<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
<!--                                                            -->
<!-- This package is free software; you can redistribute        -->
<!-- it and/or modify it under the terms of the GNU Lesser      -->
<!-- General Public License as published by the Free Software   -->
<!-- Foundation; either version 2.1 of the License, or (at      -->
<!-- your option) any later version.                            -->
<!--                                                            -->
<!-- This package is distributed in the hope that it will be    -->
<!-- useful, but WITHOUT ANY WARRANTY; without even the implied -->
<!-- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR    -->
<!-- PURPOSE.  See the GNU Lesser General Public License for    -->
<!-- more details.                                              -->
<!--                                                            -->
<!-- You should have received a copy of the GNU Lesser General  -->
<!-- Public License along with this package; if not, write      -->
<!-- to the Free Software Foundation, Inc., 59 Temple Place,    -->
<!-- Suite 330, Boston, MA  02111-1307  USA                     -->
<!--                                                            -->
<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
<!DOCTYPE callBacks [
<!ELEMENT callBacks (callBack+)>
<!ELEMENT callBack (description?, code)>
<!ATTLIST callBack name CDATA #REQUIRED>
<!ELEMENT description (localized_desc+)>
<!ELEMENT localized_desc (#PCDATA)>
<!ATTLIST localized_desc language CDATA #REQUIRED>
<!ELEMENT code (#PCDATA)>
]>

<!-- Definition of commmon callbacks. -->

<callBacks>
	<callBack name="DDD MMM dd hh:mm:ss YYYY">
		<description>
			<localized_desc language="en">
			DDD matches the name of the day (Mon, Tue, Wed, etc...)
			MMM matches the name of the month (Jan, Feb, Mar, etc...)
			dd matches the number of the day (1, 2, 3, etc...)
			hh:mm:ss matches the time (23:54:42)
			YYYY matches the year (2012)
			</localized_desc>
		</description>
		<code>
reg = re.compile(u'(?P&lt;month&gt;[A-Z]{1}[a-z]{2}) (?P&lt;day&gt;\d{1,2}) (?P&lt;hours&gt;\d{2}):(?P&lt;minutes&gt;\d{2}):(?P&lt;seconds&gt;\d{2}) (?P&lt;year&gt;\d{4})')

month = {'Jan' : 1, 
     'Feb' : 2, 
     'Mar' : 3, 
     'Apr' : 4, 
     'May' : 5, 
     'Jun' : 6, 
     'Jul' : 7, 
     'Aug' : 8, 
     'Sep' : 9, 
     'Oct' : 10, 
     'Nov' : 11, 
     'Dec' : 12}

date = reg.search(value).groupdict()

year = int(date.get('year'))
month = month.get(date.get('month', None), None)
day = int(date.get('day'))
hours = int(date.get('hours'))
minutes = int(date.get('minutes'))
seconds = int(date.get('seconds'))

log['date'] = datetime(year, month, day, hours, minutes, seconds)
		</code>
	</callBack>
	<callBack name="YYYY-MM-DD hh:mm:ss">
		<description>
			<localized_desc language="en">
			YYYY matches the year (2012)
			MM matches the number of the month (01, 02, 03 etc...)
			DD matches the number of the day (01, 02, 03, etc...)
			hh:mm:ss matches the time (23:54:42)
			</localized_desc>
		</description>
		<code>
reg = re.compile('(?P&lt;year&gt;\d{4})-(?P&lt;month&gt;\d{2})-(?P&lt;day&gt;\d{2}) (?P&lt;hours&gt;\d{2}):(?P&lt;minutes&gt;\d{2}):(?P&lt;seconds&gt;\d{2})')

date = reg.search(value).groupdict()

year= int(date.get('year'))
month = int(date.get('month'))
day = int(date.get('day'))
hours = int(date.get('hours'))
minutes = int(date.get('minutes'))
seconds = int(date.get('seconds'))

log['date'] = datetime(year, month, day, hours, minutes, seconds)
		</code>
	</callBack>
    <callback name="MM/DD/YY, hh:mm:ss">
		<description>
			<localized_desc language="en">
			MM matches the number of the month (01, 02, 03 etc...)
			DD matches the number of the day (01, 02, 03, etc...)
			YY matches the year (12)
			hh:mm:ss matches the time (23:54:42)
			</localized_desc>
		</description>
		<code>
reg = re.compile('(?P&lt;month&gt;\d{2})/(?P&lt;day&gt;\d{2})/(?P&lt;year&gt;\d{2}), (?P&lt;hours&gt;\d{1,2}):(?P&lt;minutes&gt;\d{2}):(?P&lt;seconds&gt;\d{2})')

date = reg.search(value)

date = date.groupdict()

year= int(date.get('year'))
month = int(date.get('month'))
day = int(date.get('day'))
hours = int(date.get('hours'))
minutes = int(date.get('minutes'))
seconds = int(date.get('seconds'))

newdate = datetime(2000 + year, month, day, hours, minutes, seconds)

if newdate > datetime.today():
	newdate = datetime(1900 + year, month, day, hours, minutes, seconds)

log['date'] = newdate
		</code>
	</callback>
	<callback name="YYMMDD hh:mm:ss">
		<description>
			<localized_desc language="en">
			YY matches the year (12)
			MM matches the number of the month (01, 02, 03 etc...)
			DD matches the number of the day (01, 02, 03, etc...)
			hh:mm:ss matches the time (23:54:42)
			</localized_desc>
		</description>
		<code>
reg = re.compile('(?P&lt;year&gt;[0-9]{2})(?P&lt;month&gt;[0-9]{2})(?P&lt;day&gt;[0-9]{2}) (?P&lt;hours&gt;(?:[0-9]{2}| [0-9])):(?P&lt;minutes&gt;[0-9]{2}):(?P&lt;seconds&gt;[0-9]{2})')

date = reg.search(value)
date = date.groupdict()

year= int(date.get('year'))
month = int(date.get('month'))
day = int(date.get('day'))
hours = int(date.get('hours'))
minutes = int(date.get('minutes'))
seconds = int(date.get('seconds'))

newdate = datetime(2000 + year, month, day, hours, minutes, seconds)

if newdate > datetime.today():
	newdate = datetime(1900 + year, month, day, hours, minutes, seconds)

log["date"] = newdate
		</code>
	</callback>
</callBacks>
